/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.0.2/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'ata-curriculum.snippets-conventions'
    id 'ata-curriculum.integration-test-conventions'
}

checkstyle {
    def suppressionFile = rootProject.file('Utilities/ATACheckstyle/configuration/checkstyle/unit1/suppressions.xml')
    configProperties.put('checkstyle.suppression.filter', suppressionFile)
}

dependencies {

    // Use JUnit Jupiter API for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.1'
    testImplementation group: 'org.mockito', name: 'mockito-all', version: '1.10.19'

    // Use JUnit Jupiter Engine for testing.
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:30.0-jre'

    implementation 'de.vandermeer:asciitable:0.3.2'

    implementation group: 'org.reflections', name: 'reflections', version: '0.10.2'
    testImplementation files('../gradle/lib/testinfrastructure-1.0.1.jar')

    implementation 'org.apache.logging.log4j:log4j-api:2.13.0'
    implementation 'org.apache.logging.log4j:log4j-core:2.13.0'
    runtimeOnly 'org.apache.logging.log4j:log4j-slf4j18-impl:2.13.0'

}
application {
    // Define the main class for the application.
    mainClass = 'ata.unit.one.project.App'
}

test {
    testLogging {
        events "passed", "skipped", "failed" //, "standardOut", "standardError"

        showExceptions true
        exceptionFormat "full"
        showCauses true
        showStackTraces true

        showStandardStreams = false
    }
}

task runApp(type: JavaExec) {
    standardInput = System.in
    classpath = sourceSets.main.runtimeClasspath
    main = 'com.kenzie.unit.one.project.App'
}

def wflowToTestsMap = [
        'calendarapp-task1': [
                'com.kenzie.unit.one.project.AppTest'
        ],
        'calendarapp-task2': [
                'com.kenzie.unit.one.project.service.VideoConferenceServiceTest'
        ],
        'calendarapp-task3': [
                'com.kenzie.unit.one.project.service.EventServiceTest'
        ],
        'calendarapp-task4': [
                'com.kenzie.unit.one.project.service.VideoConferenceServicePhase2Test'
        ],
        'calendarapp-task5': [
                'com.kenzie.unit.one.project.comparator.SortByPersonNameTest'
        ]
]

wflowToTestsMap.forEach { wflowName, testList ->
    tasks.register(wflowName) {
        dependsOn wflowtest
        test.doFirst {
            filter {
                testList.each { includeTestsMatching it }
            }
        }
    }
}

